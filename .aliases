#!/bin/sh

# ------------------------------ #
#           Overrides            #
# ------------------------------ #
# alias ls='exa'
# alias cat='batcat'
# alias df='duf'
# alias du='du -h'
# alias grep='ripgrep'
# alias find='fd'
# alias dud='du -d 1 -h'
# alias duf='du -sh'

# ------------------------------ #
#              Git               #
# ------------------------------ #
alias gp='git pull && git fetch -p'

# ------------------------------ #
#              Git               #
# ------------------------------ #
alias npmc='npm run clean'
alias npmb='npm run build'
alias npmt='npm run test'


# ------------------------------ #
#            Hardhat             #
# ------------------------------ #
alias hh='npx hardhat'
alias hhcl='npx hardhat clean'
alias hhc='npx hardhat compile'
alias hht='REPORT_GAS=true npx hardhat test'


# ------------------------------ #
#             Docker             #
# ------------------------------ #
# docker-compose
alias dk='docker compose'
# docker container
alias dc='docker container'
alias dcri='docker container run -it'
alias dcei='docker container exec -it'
alias dcls='docker container ls'
# alias dclsl='docker container ls -l'
alias dclsa='docker container ls -a'
alias dclsaq='docker container ls -a -q'
alias dcrm='docker container rm'
alias dcip='docker container inspect --format '{{ .NetworkSettings.IPAddress }}' '
dcrml() { if [ $(dcls -lq | wc -l) != 0 ]; then docker container rm $(dcls -lq); fi }
dcrma() { if [ $(dclsaq | wc -l) != 0 ]; then docker container rm $(dclsaq); fi }
dcrmaf() { if [ $(dclsaq | wc -l) != 0 ]; then docker container rm -f $(dclsaq); fi }
# docker image
alias di='docker image'
alias dils='docker image ls'
alias dirm='docker image rm'
alias disha="docker image inspect --format='{{ index .RepoDigests 0 }}'"
# docker service
# alias ds='docker service'
# alias dsip="docker service inspect --format '{{ .NetworkSettings.IPAddress }}' "
# docker network
alias dn='docker network'
# docker volume
alias dv='docker volume'
dockerfile() {
    docker run \
        --rm \
        -v /var/run/docker.sock:/var/run/docker.sock \
        chenzj/dfimage $(docker images --filter=reference=$1 --format "{{.ID}}")
}

# ------------------------------ #
#        Blockchain RPC          #
# ------------------------------ #
rpc() {
    curl -s -X POST \
        --header "Content-Type: application/json" \
        --data '{"jsonrpc":"2.0", "id":1, "method":"'$2'", "params":'$3'}' \
        $1 | jq
}

lastblock() {
    rpc $1 'eth_getBlockByNumber' '["latest", false]' | jq .result
}
lastblocknumber() {
    rpc $1 'eth_getBlockByNumber' '["latest", false]' | jq .result.number | xargs printf '%d\n'
}

# ------------------------------ #
#              Misc              #
# ------------------------------ #
tempdir() { cd $(mktemp -d) }
alias pingb='ping brave.com'
alias tohex="printf '%x\n'"
alias todec="printf '%d\n'"
alias https='http --default-scheme=https'
alias c='xclip -selection clipboard -in -filter'  # copy clipboard
alias x='xclip -selection clipboard -in'          # cut to clipboard
alias v='xclip -selection clipboard -out'         # paste from clipboard
alias dotfiles='code ~/dotfiles'
alias myip='curl https://ipinfo.io/ip; echo'
